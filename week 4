import itertools
import numpy as np

def generate_matrices(n):
    matrices_with_det_0 = 0
    total_matrices = 0

    if n == 1:
        values = [0, 1]
    else:
        values = [0, 1] * (n * n // 2)
        if n % 2 == 1:
            values += [0]

    for perm in itertools.permutations(values, n * n):
        matrix = np.array(perm).reshape((n, n))
        total_matrices += 1

        if np.linalg.det(matrix) == 0:
            matrices_with_det_0 += 1
            #print(f"Matrix {matrices_with_det_0}:")
            #print(matrix)
            #print("Determinant:", np.linalg.det(matrix))
            #print("-------------------------")

    # Handle the case where the player placing 1 starts
    if n > 1:
        values = [1, 0] * (n * n // 2)
        if n % 2 == 1:
            values += [1]
        for perm in itertools.permutations(values, n * n):
            matrix = np.array(perm).reshape((n, n))
            total_matrices += 1

            if np.linalg.det(matrix) == 0:
                matrices_with_det_0 += 1
                #print(f"Matrix {matrices_with_det_0}:")
                #print(matrix)
                #print("Determinant:", np.linalg.det(matrix))
                #print("-------------------------")

    print(f"Total Matrices: {total_matrices}")
    print(f"Matrices with Determinant 0: {matrices_with_det_0}")

# Input the value of n
n = int(input("Enter the value of n: "))
generate_matrices(n)
