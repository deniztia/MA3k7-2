def generate_tree(rows):
    # Initialize a 2D list for the tree
    tree = [[1]]

    # Generate the tree using nested loops
    for i in range(1, rows):
        current_row = []
        for j in range(len(tree[i - 1]) + 1):
            if j == 0:
                current_row.append(tree[i - 1][j] + 1)
            elif j == len(tree[i - 1]):
                current_row.append(tree[i - 1][j - 1] + 2)
            else:
                current_row.append(tree[i - 1][j - 1] + 2)
                current_row.append(tree[i - 1][j] + 1)
        tree.append(current_row)

    return tree

def count_values_in_row(row, target_value):
    count_target_value = row.count(target_value)
    total_values = len(row)
    return count_target_value, total_values

def print_tree_with_counts(tree, target_value):
    for i, row in enumerate(tree, start=1):
        count_25, total_values = count_values_in_row(row, target_value)
        print(f"Row {i}: Count of {target_value}s: {count_25}, Total Values: {total_values}")

# Set the number of rows (steps+1)
rows = 25

# Define the target value
target_value = 25

# Generate and print the tree with value counts
tree = generate_tree(rows)
print_tree_with_counts(tree, target_value)

