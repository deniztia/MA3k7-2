import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

# Define the sets of points
data_sets = [
    [4, 5, 5, 6, 5, 6, 6, 7],
    [5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9],
    [6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11],
    [7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 9, 10, 10, 11, 10, 11, 11, 12, 10, 11, 11, 12, 11, 12, 12, 13],
    [8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 9, 10, 10, 11, 10, 11, 11, 12, 10, 11, 11, 12, 11, 12, 12, 13, 9, 10, 10, 11, 10, 11, 11, 12, 10, 11, 11, 12, 11, 12, 12, 13, 10, 11, 11, 12, 11, 12, 12, 13, 11, 12, 12, 13, 12, 13, 13, 14],
    [9, 10, 10, 11, 10, 11, 11, 12, 10, 11, 11, 12, 11, 12, 12, 13, 10, 11, 11, 12, 11, 12, 12, 13, 11, 12, 12, 13, 12, 13, 13, 14, 10, 11, 11, 12, 11, 12, 12, 13, 11, 12, 12, 13, 12, 13, 13, 14, 11, 12, 12, 13, 12, 13, 13, 14, 12, 13, 13, 14, 13, 14, 14, 15],
    [10, 11, 11, 12, 11, 12, 12, 13, 11, 12, 12, 13, 12, 13, 13, 14, 11, 12, 12, 13, 12, 13, 13, 14, 12, 13, 13, 14, 13, 14, 14, 15, 11, 12, 12, 13, 12, 13, 13, 14, 12, 13, 13, 14, 13, 14, 14, 15, 12, 13, 13, 14, 13, 14, 14, 15, 13, 14, 14, 15, 14, 15, 15, 16],
    [11, 12, 12, 13, 12, 13, 13, 14, 12, 13, 13, 14, 13, 14, 14, 15, 12, 13, 13, 14, 13, 14, 14, 15, 13, 14, 14, 15, 14, 15, 15, 16, 12, 13, 13, 14, 13, 14, 14, 15, 13, 14, 14, 15, 14, 15, 15, 16, 13, 14, 14, 15, 14, 15, 15, 16, 14, 15, 15, 16, 15, 16, 16, 17]
]

# Plotting
colors = iter(plt.cm.rainbow(np.linspace(0, 1, len(data_sets))))

plt.figure(figsize=(10, 6))

def fit_function(x, a, b, c, d, e):
    return a * x**4 + b * x**3 + c * x**2 + d * x + e

for dataset in data_sets:
    x = np.arange(1, len(dataset) + 1)
    y = np.array(dataset)

    # Fit a degree 4 polynomial using curve_fit
    params, covariance = curve_fit(fit_function, x, y)
    a, b, c, d, e = params

    # Plot the points
    plt.scatter(x, y, color=next(colors), label=f'Row {data_sets.index(dataset) + 4}')

    # Plot the curve of best fit
    x_fit = np.linspace(min(x), max(x), 100)
    y_fit = fit_function(x_fit, a, b, c, d, e)
    plt.plot(x_fit, y_fit, label=f'Fit {data_sets.index(dataset) + 4}', linestyle='--')

plt.title('Curves of Best Fit for Each Set of Points (Degree 4 Polynomial)')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()
